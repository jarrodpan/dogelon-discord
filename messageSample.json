
Message {channelId: '945587840715194388', guildId: '944794237411668008', id: '947841617203724309', createdTimestamp: 1646053451587, type: 'DEFAULT', …
}
activity: null
applicationId: null
attachments: Map(0) {size: 0
}
author: User {id: '944798462053089300', bot: false, system: false, flags: UserFlags, username: 'phantomagic', …
}
channelId: '945587840715194388'
components: (0) []
content: '$gme'
createdTimestamp: 1646053451587
editedTimestamp: null
embeds: (0) []
flags: MessageFlags {bitfield: 0
}
groupActivityApplication: null
guildId: '944794237411668008'
id: '947841617203724309'
interaction: null
mentions: MessageMentions {everyone: false, users: Map(0), roles: Map(0), _members: null, _channels: null, …
}
nonce: '947841620135378944'
pinned: false
reactions: ReactionManager {message: Message, client: Client, holds: ƒ, _cache: Map(0)
}
reference: null
stickers: Map(0) {size: 0
}
system: false
tts: false
type: 'DEFAULT'
webhookId: null
channel (get): ƒ channel() {\n    return this.client.channels.resolve(this.channelId);\n
}
cleanContent (get): ƒ cleanContent() {\n // eslint-disable-next-line eqeqeq\n    return this.content != null ? Util.cleanContent(this.content, this.channel) : null;\n  }
client: Client {_events: {…
		}, _eventsCount: 3, _maxListeners: undefined, options: {…
		}, rest: RESTManager, …
	}
createdAt (get): ƒ createdAt() {\n    return new Date(this.createdTimestamp);\n
	}
crosspostable (get): ƒ crosspostable() {\n    const bitfield =\n      Permissions.FLAGS.SEND_MESSAGES |\n      (this.author.id === this.client.user.id ? Permissions.defaultBit : Permissions.FLAGS.MANAGE_MESSAGES);\n    const { channel
		} = this;\n    return Boolean(\n      channel?.type === 'GUILD_NEWS' &&\n        !this.flags.has(MessageFlags.FLAGS.CROSSPOSTED) &&\n        this.type === 'DEFAULT' &&\n        channel.viewable &&\n        channel.permissionsFor(this.client.user)?.has(bitfield, false) &&\n        !deletedMessages.has(this),\n    );\n
	}
deletable (get): ƒ deletable() {\n    if (deletedMessages.has(this)) {\n      return false;\n
		}\n    if (!this.guild) {\n      return this.author.id === this.client.user.id;\n
		}\n // DMChannel does not have viewable property, so check viewable after proved that message is on a guild.\n    if (!this.channel?.viewable) {\n      return false;\n    }\n\n    const permissions = this.channel?.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows deleting even if timed out\n    if (permissions.has(Permissions.FLAGS.ADMINISTRATOR, false)) return true;\n\n    return Boolean(\n      this.author.id === this.client.user.id ||\n        (permissions.has(Permissions.FLAGS.MANAGE_MESSAGES, false) &&\n          this.guild.me.communicationDisabledUntilTimestamp < Date.now()),\n    );\n  }
deleted (get): ƒ deleted() {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Message#deleted is deprecated, see https: //github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    return deletedMessages.has(this);\n  }
deleted (set): ƒ deleted(value) {\n    if (!deprecationEmittedForDeleted) {\n      deprecationEmittedForDeleted = true;\n      process.emitWarning(\n        'Message#deleted is deprecated, see https: //github.com/discordjs/discord.js/issues/7091.',\n        'DeprecationWarning',\n      );\n    }\n\n    if (value) deletedMessages.add(this);\n    else deletedMessages.delete(this);\n  }
editable (get): ƒ editable() {\n    const precheck = Boolean(\n      this.author.id === this.client.user.id && !deletedMessages.has(this) && (!this.guild || this.channel?.viewable),\n    );\n // Regardless of permissions thread messages cannot be edited if\n    // the thread is locked.\n    if (this.channel?.isThread()) {\n      return precheck && !this.channel.locked;\n    }\n    return precheck;\n  }
editedAt (get): ƒ editedAt() {\n    return this.editedTimestamp ? new Date(this.editedTimestamp) : null;\n
							}
guild (get): ƒ guild() {\n    return this.client.guilds.resolve(this.guildId) ?? this.channel?.guild ?? null;\n
							}
hasThread (get): ƒ hasThread() {\n    return this.flags.has(MessageFlags.FLAGS.HAS_THREAD);\n
							}
member (get): ƒ member() {\n    return this.guild?.members.resolve(this.author) ?? null;\n
							}
partial (get): ƒ partial() {\n    return typeof this.content !== 'string' || !this.author;\n
							}
pinnable (get): ƒ pinnable() {\n    const { channel
								} = this;\n    return Boolean(\n      !this.system &&\n        !deletedMessages.has(this) &&\n        (!this.guild ||\n          (channel?.viewable &&\n            channel?.permissionsFor(this.client.user)?.has(Permissions.FLAGS.MANAGE_MESSAGES, false))),\n    );\n
							}
thread (get): ƒ thread() {\n    return this.channel?.threads?.resolve(this.id) ?? null;\n
							}
url (get): ƒ url() {\n    return `https: //discord.com/channels/${this.guildId ?? '@me'}/${this.channelId}/${this.id}`;\n  }
								[
									[Prototype
									]
								]: Base
null
<LAN Party#botspam@Dogelon>
